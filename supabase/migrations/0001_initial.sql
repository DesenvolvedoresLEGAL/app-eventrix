-- Migration: Initial schema for event management app
-- Create extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
-- Table: status_codes
CREATE TABLE status_codes (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    context text NOT NULL,
    code text NOT NULL,
    label text NOT NULL
);

-- Trigger function to update updated_at
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger function to log entity changes
CREATE OR REPLACE FUNCTION log_entity_change()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO entity_logs (entity_type, entity_id, action, performed_by, old_value, new_value)
  VALUES (
    TG_TABLE_NAME,
    COALESCE(NEW.id, OLD.id),
    TG_OP,
    auth.uid(),
    to_jsonb(OLD),
    to_jsonb(NEW)
  );
  RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;


-- Table: events
CREATE TABLE events (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    description text,
    category text,
    start_date timestamptz,
    end_date timestamptz,
    website text,
    capacity integer,
    color_scheme text,
    logo_url text,
    banner_url text,
    public_registration boolean DEFAULT true,
    location text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Table: venues
CREATE TABLE venues (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    name text NOT NULL,
    type text,
    capacity integer,
    location text,
    amenities text,
    status text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_venues_event_id ON venues(event_id);

-- Table: tracks
CREATE TABLE tracks (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    name text NOT NULL,
    description text,
    color text,
    coordinator_id uuid REFERENCES staff(id),
    start_time timestamptz,
    end_time timestamptz,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_tracks_event_id ON tracks(event_id);

-- Table: lectures
CREATE TABLE lectures (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    track_id uuid REFERENCES tracks(id) ON DELETE SET NULL,
    venue_id uuid REFERENCES venues(id) ON DELETE SET NULL,
    title text NOT NULL,
    speaker text,
    description text,
    start_time timestamptz,
    end_time timestamptz,
    status text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_lectures_event_id ON lectures(event_id);
CREATE INDEX idx_lectures_start_time ON lectures(start_time);

-- Table: activities
CREATE TABLE activities (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    name text NOT NULL,
    type text,
    venue_id uuid REFERENCES venues(id) ON DELETE SET NULL,
    instructor text,
    start_time timestamptz,
    end_time timestamptz,
    capacity integer,
    registered integer DEFAULT 0,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_activities_event_id ON activities(event_id);

-- Table: exhibitors
CREATE TABLE exhibitors (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    name text NOT NULL,
    category text,
    stand text,
    status text,
    email text,
    phone text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_exhibitors_event_id ON exhibitors(event_id);

-- Table: suppliers
CREATE TABLE suppliers (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    name text NOT NULL,
    category text,
    contact_person text,
    email text,
    phone text,
    services text,
    rating numeric,
    status text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_suppliers_event_id ON suppliers(event_id);

-- Table: visitors
CREATE TABLE visitors (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    user_id uuid REFERENCES auth.users(id),
    name text NOT NULL,
    email text,
    phone text,
    company text,
    position text,
    registered_at timestamptz DEFAULT now(),
    status text,
    checked_in boolean DEFAULT false,
    qr_code text,
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_visitors_event_id ON visitors(event_id);
CREATE INDEX idx_visitors_user_id ON visitors(user_id);
CREATE UNIQUE INDEX uq_visitors_email_event ON visitors(email, event_id);

-- Table: roles
CREATE TABLE roles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE,
    description text,
    color text
);
-- Table: modules
CREATE TABLE modules (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL UNIQUE
);


-- Table: permissions
CREATE TABLE permissions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE,
    description text,
    module_id integer REFERENCES modules(id) ON DELETE SET NULL
);

CREATE INDEX idx_permissions_module_id ON permissions(module_id);
-- Table: role_permissions
CREATE TABLE role_permissions (
    role_id uuid REFERENCES roles(id) ON DELETE CASCADE,
    permission_id uuid REFERENCES permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);

-- Table: staff
CREATE TABLE staff (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    event_id uuid REFERENCES events(id) ON DELETE CASCADE,
    name text NOT NULL,
    department text,
    email text,
    phone text,
    status text,
    role_id uuid REFERENCES roles(id),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    CONSTRAINT staff_user_event_unique UNIQUE (user_id, event_id)
);
CREATE INDEX idx_staff_user_id ON staff(user_id);
CREATE INDEX idx_staff_event_id ON staff(event_id);

-- Table: staff_roles (for multiple roles per staff)
CREATE TABLE staff_roles (
    staff_id uuid REFERENCES staff(id) ON DELETE CASCADE,
    role_id uuid REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (staff_id, role_id)
);
-- Table: teams
CREATE TABLE teams (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Table: team_members
CREATE TABLE team_members (
    team_id uuid REFERENCES teams(id) ON DELETE CASCADE,
    staff_id uuid REFERENCES staff(id) ON DELETE CASCADE,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    PRIMARY KEY (team_id, staff_id)
);



-- Table: checklists
CREATE TABLE checklists (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    title text NOT NULL,
    category text,
    priority text,
    due_date date,
    status text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_checklists_event_id ON checklists(event_id);

-- Table: tasks
CREATE TABLE tasks (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    checklist_id uuid REFERENCES checklists(id) ON DELETE CASCADE,
    title text NOT NULL,
    description text,
    assignee_id uuid REFERENCES staff(id) ON DELETE SET NULL,
    priority text,
    due_date date,
    completed boolean DEFAULT false,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_tasks_assignee_id ON tasks(assignee_id);

-- Table: checkins
CREATE TABLE checkins (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    visitor_id uuid REFERENCES visitors(id) ON DELETE SET NULL,
    staff_id uuid REFERENCES staff(id) ON DELETE SET NULL,
    checkin_at timestamptz DEFAULT now(),
    checkout_at timestamptz,
    method text,
    device text,
    status text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_checkins_event_id ON checkins(event_id);
CREATE INDEX idx_checkins_checkin_at ON checkins(checkin_at);

-- Table: access_logs
CREATE TABLE access_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    event_id uuid REFERENCES events(id) ON DELETE CASCADE,
    action text,
    ip text,
    device text,
    timestamp timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_access_logs_event_id ON access_logs(event_id);

-- Table: api_keys
CREATE TABLE api_keys (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    name text,
    api_key text NOT NULL UNIQUE,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    last_used timestamptz,
    request_count integer DEFAULT 0,
    active boolean DEFAULT true
);
CREATE INDEX idx_api_keys_user_id ON api_keys(user_id);

-- Table: api_endpoints
CREATE TABLE api_endpoints (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    method text,
    path text,
    description text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    request_count integer DEFAULT 0,
    avg_response_time numeric,
    error_rate numeric
);

-- Table: api_logs
CREATE TABLE api_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    api_key_id uuid REFERENCES api_keys(id) ON DELETE SET NULL,
    endpoint_id uuid REFERENCES api_endpoints(id) ON DELETE SET NULL,
    timestamp timestamptz DEFAULT now(),
    response_code integer,
    response_time integer
);
CREATE INDEX idx_api_logs_api_key ON api_logs(api_key_id);

-- Table: webhooks
CREATE TABLE webhooks (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    url text,
    events_subscribed text[],
    status text,
    last_delivery timestamptz,
    last_success timestamptz,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_webhooks_user_id ON webhooks(user_id);
CREATE INDEX idx_webhooks_status ON webhooks(status);
-- Table: webhook_subscriptions
CREATE TABLE webhook_subscriptions (
    webhook_id uuid REFERENCES webhooks(id) ON DELETE CASCADE,
    event_name text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    PRIMARY KEY (webhook_id, event_name)
);


-- Table: ai_interactions
CREATE TABLE ai_interactions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    event_id uuid REFERENCES events(id) ON DELETE CASCADE,
    module text,
    request text,
    response text,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_ai_interactions_event_id ON ai_interactions(event_id);
CREATE INDEX idx_ai_interactions_user_id ON ai_interactions(user_id);

-- Table: dynamic_pricing_rules
CREATE TABLE dynamic_pricing_rules (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid REFERENCES events(id) ON DELETE CASCADE,
    criteria jsonb,
    base_price numeric,
    adjusted_price numeric,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_dynamic_pricing_event_id ON dynamic_pricing_rules(event_id);

-- Table: landing_pages
CREATE TABLE landing_pages (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid REFERENCES events(id) ON DELETE CASCADE,
    slug text UNIQUE,
    title text,
    content text,
    visits integer DEFAULT 0,
    conversions integer DEFAULT 0,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_landing_pages_event_id ON landing_pages(event_id);

-- Table: email_campaigns
CREATE TABLE email_campaigns (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id uuid REFERENCES events(id) ON DELETE CASCADE,
    subject text,
    sent_at timestamptz,
    total_sent integer,
    opens integer,
    clicks integer,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
CREATE INDEX idx_email_campaigns_event_id ON email_campaigns(event_id);

-- Table: entity_logs
CREATE TABLE entity_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type text,
    entity_id uuid,
    action text,
    performed_by uuid REFERENCES auth.users(id),
    old_value jsonb,
    new_value jsonb,
    timestamp timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE TRIGGER trg_events_updated BEFORE UPDATE ON events FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_venues_updated BEFORE UPDATE ON venues FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_tracks_updated BEFORE UPDATE ON tracks FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_lectures_updated BEFORE UPDATE ON lectures FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_activities_updated BEFORE UPDATE ON activities FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_exhibitors_updated BEFORE UPDATE ON exhibitors FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_suppliers_updated BEFORE UPDATE ON suppliers FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_visitors_updated BEFORE UPDATE ON visitors FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_staff_updated BEFORE UPDATE ON staff FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_teams_updated BEFORE UPDATE ON teams FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_team_members_updated BEFORE UPDATE ON team_members FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_checklists_updated BEFORE UPDATE ON checklists FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_tasks_updated BEFORE UPDATE ON tasks FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_checkins_updated BEFORE UPDATE ON checkins FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_access_logs_updated BEFORE UPDATE ON access_logs FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_api_keys_updated BEFORE UPDATE ON api_keys FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_api_endpoints_updated BEFORE UPDATE ON api_endpoints FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_api_logs_updated BEFORE UPDATE ON api_logs FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_webhooks_updated BEFORE UPDATE ON webhooks FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_webhook_subscriptions_updated BEFORE UPDATE ON webhook_subscriptions FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_ai_interactions_updated BEFORE UPDATE ON ai_interactions FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_dynamic_pricing_rules_updated BEFORE UPDATE ON dynamic_pricing_rules FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_landing_pages_updated BEFORE UPDATE ON landing_pages FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_email_campaigns_updated BEFORE UPDATE ON email_campaigns FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_entity_logs_updated BEFORE UPDATE ON entity_logs FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- Logging triggers
CREATE TRIGGER trg_events_log AFTER INSERT OR UPDATE OR DELETE ON events
  FOR EACH ROW EXECUTE FUNCTION log_entity_change();
CREATE TRIGGER trg_lectures_log AFTER INSERT OR UPDATE OR DELETE ON lectures
  FOR EACH ROW EXECUTE FUNCTION log_entity_change();
CREATE TRIGGER trg_visitors_log AFTER INSERT OR UPDATE OR DELETE ON visitors
  FOR EACH ROW EXECUTE FUNCTION log_entity_change();
